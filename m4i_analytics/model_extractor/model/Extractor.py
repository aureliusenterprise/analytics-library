from abc import ABCMeta, abstractmethod
import logging


class ExtractionResult(dict):
    
    def __init__(self, model, data, branchName):
        self['model'] = model
        self['data'] = data
        self['branchName'] = branchName
    # END __init__
# END ExtractionResult


class Extractor(object):

    """
    This is the top level class that provided a basic structure for all model extractors.
    Inheriting classes should implement the extract method to generate a model out of a particular source.
    The result of the extract method should always be an ExtractionResult, which is also provided in this module.
    Extractor parameters are intended to be passed into the constructor, after which extract can be called repeatedly.
    This class also provides logging utilities. By default, we always log messages to the console. Additionally, logs can also be written to a file if the log_file_path parameter is passed to the constructor.
    """
    
    __metaclass__ = ABCMeta
    
    logger = None
    
    def __init__(self
                 , branch_name='MASTER'
                 , log_file_path=None
                 , log_file_format='%(asctime)s - %(name)s -%(relativeCreated)6d %(threadName)s - %(levelname)s - %(message)s'
                 ):
        
        """
        :param str branch_name: The name of the branch to which the model generated by this extractor should be committed
        :param str log_file_path: The path to which the log file should be written. If the file does not exist, it will be created
        :param str log_file_format: The format of each entry into the log file.
        """
        
        self.branch_name = branch_name
        self.logger = logging.getLogger(type(self).__name__)
        self.logger.setLevel(logging.DEBUG)
        
        formatter = logging.Formatter(log_file_format)

        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.DEBUG)
        console_handler.setFormatter(formatter)
        self.logger.addHandler(console_handler)
        
        if log_file_path is not None:
            file_handler = logging.FileHandler(log_file_path)
            file_handler.setLevel(logging.DEBUG)
            file_handler.setFormatter(formatter)
            self.logger.addHandler(file_handler)
        # END IF

    # END __init__
    
    @abstractmethod
    def extract(self, data_only=False):

        """
        Inheriting classes should implement this method to generate a model out of a particular source.
        The result of should always be an ExtractionResult, which is also provided in this module.

        :returns: The generated model, generated data and the name of the branch to which the model and data below
        :rtype: ExtractionResult

        :param boolean data_only: Whether or not the model concepts should be generated in addition to the model data. 
        """

        pass
    # END 
    
# END Extractor
